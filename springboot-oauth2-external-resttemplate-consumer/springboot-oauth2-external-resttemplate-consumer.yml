
spring:
  zipkin:
    base-url: ${params.zipkin.uri}
  sleuth:
    sampler:
      probability: 1.0

# URLs de l'API Gateway pour les appels aux microservices
api:
  gateway:
    url: ${params.gateway.uri} 

# Configuration pour les appels à l'Authorization Server
authorization:
  server:
    url: ${params.oauth2.issuerUri}/oauth2/token
  ms1:
    clientId: ${params.oauth2.client1.clientId}
    clientSecret: ${params.oauth2.client1.clientSecret}
    scopes: ${params.oauth2.client1.scopes}
  ms2:
    clientId: ${params.oauth2.client2.clientId}
    clientSecret: ${params.oauth2.client2.clientId}
    scopes: ${params.oauth2.client2.scopes}



## Start SWAGGER
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
    # Activer le mode "try it out" pour tous les endpoints
    try-it-out-enabled: true
  show-actuator: false # activer sinon pour voir les endpoints actuator dans le swagger.
    
app:
  openapi:
    local-url: http://localhost:${server.port}
    dev-url: http://10.0.0.137:${server.port}
    homol-url: http://10.0.0.500:${server.port}
    prod-url: https://10.0.0.600:${server.port}

## uri de gr-conf-swagger-aggregator
swagger:
  aggregator:
    cors:
      uri: ${aggregator.cors.uri}

eureka:
  instance:
    metadata-map:
      # Indique que ce microservice doit être inclus dans le swagger de 'gr-conf-swagger-aggregator'' (désactiver le sinon sinon).
      swagger.aggregator.enabled: ${aggregator.eureka.enabled}
## Start SWAGGER