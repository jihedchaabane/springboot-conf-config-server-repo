spring:
  security:
    oauth2:
      client:
        registration:
          products-client-client-credentials:
            provider: spring
            client-id: ${params.oauth2.clientId}
            client-secret: ${params.oauth2.clientSecret}
            authorization-grant-type: client_credentials
            client-name: products-client-client-credentials
            scope: ${params.oauth2.scope}
        provider:
          spring:
            issuer-uri: ${params.oauth2.issuerUri}
  zipkin:
    base-url: ${params.zipkin.uri}
  sleuth:
    sampler:
      probability: 1.0


## Start SWAGGER
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
  show-actuator: false # activer sinon pour voir les endpoints actuator dans le swagger.
    
# http://******:1112/swagger-ui/index.html
app:
  openapi:
    local-url: http://localhost:${server.port}
    dev-url: http://10.0.0.137:${server.port}
    homol-url: http://10.0.0.500:${server.port}
    prod-url: https://10.0.0.600:${server.port}

## uri de gr-conf-swagger-aggregator
swagger:
  aggregator:
    cors:
      uri: ${aggregator.cors.uri}

eureka:
  instance:
    metadata-map:
      # Indique que ce microservice doit être inclus dans le swagger de 'gr-conf-swagger-aggregator'' (désactiver le sinon sinon).
      swagger.aggregator.enabled: ${aggregator.eureka.enabled}
## Start SWAGGER
logging:
  level:
    root: INFO
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG