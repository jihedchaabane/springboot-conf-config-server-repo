eureka:
  client:
    service-url:
      defaultZone: ${params.eureka.uri}
    fetch-registry: true
    register-with-eureka: true
## 'gr-conf-swagger-aggregator' Cors issues fix..
    # Rafraîchir le registre toutes les X secondes
    registry-fetch-interval-seconds: ${eureka.fetch.seconds:60}
  instance:
    preferIpAddress: true
    ipAddress: ${host.where.docker.ip}
    hostname: ${spring.application.name}
    metadata-map:
      # Indique que ce microservice doit être inclus dans le swagger de 'gr-conf-swagger-aggregator'
      # ==> (désactivé par défaut sinon).
      swagger.aggregator.enabled: ${aggregator.eureka.enabled:false}


management:
  endpoints:
    # To expose all management endpoints
    web.exposure.include: "*"
    # To expose defined endpoints
    # web.exposure.include: health, caches, env, info, logfile, httptrace, metrics
    web.base-path: /actuator
    web.enable.include: health
  endpoint:
    health:
      show-details: ALWAYS

## START : uri de gr-conf-swagger-aggregator
swagger-params:
  issuerUri: ${params.oauth2.issuerUri}
  servers:
    liste:
      - uri: http://localhost:${server.port}
        description: Local environment
      - uri: http://10.0.0.137:${server.port}
        description: Development environment
      - uri: http://10.0.0.500:${server.port}
        description: Homologation environment
      - uri: http://10.0.0.500:${server.port}
        description: Production environment
  aggregator:
    enabled: ${aggregator.eureka.enabled}
    cors:
      uri: http://${host.where.docker.ip}:8765